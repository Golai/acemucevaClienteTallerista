package persistence;

import java.io.*;

 /**
  * Evento Value Object.
  * This class is value object representing database table acemuceva
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class Evento implements Cloneable, Serializable {

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int id_evento;
    private int id_encargado;
    private String nombre_evento;
    private String descripcion;
    private java.sql.Date fecha;
    private String lugar;
    private String hora;
    private int cupos;
    private int puntos;
    private String tipo_evento;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public Evento () {

    }

    public Evento (int id_eventoIn) {

          this.id_evento = id_eventoIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getId_evento() {
          return this.id_evento;
    }
    public void setId_evento(int id_eventoIn) {
          this.id_evento = id_eventoIn;
    }

    public int getId_encargado() {
          return this.id_encargado;
    }
    public void setId_encargado(int id_encargadoIn) {
          this.id_encargado = id_encargadoIn;
    }

    public String getNombre_evento() {
          return this.nombre_evento;
    }
    public void setNombre_evento(String nombre_eventoIn) {
          this.nombre_evento = nombre_eventoIn;
    }

    public String getDescripcion() {
          return this.descripcion;
    }
    public void setDescripcion(String descripcionIn) {
          this.descripcion = descripcionIn;
    }

    public java.sql.Date getFecha() {
          return this.fecha;
    }
    public void setFecha(java.sql.Date fechaIn) {
          this.fecha = fechaIn;
    }

    public String getLugar() {
          return this.lugar;
    }
    public void setLugar(String lugarIn) {
          this.lugar = lugarIn;
    }

    public String getHora() {
          return this.hora;
    }
    public void setHora(String horaIn) {
          this.hora = horaIn;
    }

    public int getCupos() {
          return this.cupos;
    }
    public void setCupos(int cuposIn) {
          this.cupos = cuposIn;
    }

    public int getPuntos() {
          return this.puntos;
    }
    public void setPuntos(int puntosIn) {
          this.puntos = puntosIn;
    }

    public String getTipo_evento() {
          return this.tipo_evento;
    }
    public void setTipo_evento(String tipo_eventoIn) {
          this.tipo_evento = tipo_eventoIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int id_eventoIn,
          int id_encargadoIn,
          String nombre_eventoIn,
          String descripcionIn,
          java.sql.Date fechaIn,
          String lugarIn,
          String horaIn,
          int cuposIn,
          int puntosIn,
          String tipo_eventoIn) {
          this.id_evento = id_eventoIn;
          this.id_encargado = id_encargadoIn;
          this.nombre_evento = nombre_eventoIn;
          this.descripcion = descripcionIn;
          this.fecha = fechaIn;
          this.lugar = lugarIn;
          this.hora = horaIn;
          this.cupos = cuposIn;
          this.puntos = puntosIn;
          this.tipo_evento = tipo_eventoIn;
    }


    /** 
     * hasEqualMapping-method will compare two Evento instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(Evento valueObject) {

          if (valueObject.getId_evento() != this.id_evento) {
                    return(false);
          }
          if (valueObject.getId_encargado() != this.id_encargado) {
                    return(false);
          }
          if (this.nombre_evento == null) {
                    if (valueObject.getNombre_evento() != null)
                           return(false);
          } else if (!this.nombre_evento.equals(valueObject.getNombre_evento())) {
                    return(false);
          }
          if (this.descripcion == null) {
                    if (valueObject.getDescripcion() != null)
                           return(false);
          } else if (!this.descripcion.equals(valueObject.getDescripcion())) {
                    return(false);
          }
          if (this.fecha == null) {
                    if (valueObject.getFecha() != null)
                           return(false);
          } else if (!this.fecha.equals(valueObject.getFecha())) {
                    return(false);
          }
          if (this.lugar == null) {
                    if (valueObject.getLugar() != null)
                           return(false);
          } else if (!this.lugar.equals(valueObject.getLugar())) {
                    return(false);
          }
          if (valueObject.getHora() != this.hora) {
                    return(false);
          }
          if (valueObject.getCupos() != this.cupos) {
                    return(false);
          }
          if (valueObject.getPuntos() != this.puntos) {
                    return(false);
          }
          if (this.tipo_evento == null) {
                    if (valueObject.getTipo_evento() != null)
                           return(false);
          } else if (!this.tipo_evento.equals(valueObject.getTipo_evento())) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass Evento, mapping to table acemuceva\n");
        out.append("Persistent attributes: \n"); 
        out.append("id_evento = " + this.id_evento + "\n"); 
        out.append("id_encargado = " + this.id_encargado + "\n"); 
        out.append("nombre_evento = " + this.nombre_evento + "\n"); 
        out.append("descripcion = " + this.descripcion + "\n"); 
        out.append("fecha = " + this.fecha + "\n"); 
        out.append("lugar = " + this.lugar + "\n"); 
        out.append("hora = " + this.hora + "\n"); 
        out.append("cupos = " + this.cupos + "\n"); 
        out.append("puntos = " + this.puntos + "\n"); 
        out.append("tipo_evento = " + this.tipo_evento + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        Evento cloned = new Evento();

        cloned.setId_evento(this.id_evento); 
        cloned.setId_encargado(this.id_encargado); 
        if (this.nombre_evento != null)
             cloned.setNombre_evento(new String(this.nombre_evento)); 
        if (this.descripcion != null)
             cloned.setDescripcion(new String(this.descripcion)); 
        if (this.fecha != null)
             cloned.setFecha((java.sql.Date)this.fecha.clone()); 
        if (this.lugar != null)
             cloned.setLugar(new String(this.lugar)); 
        cloned.setHora(this.hora); 
        cloned.setCupos(this.cupos); 
        cloned.setPuntos(this.puntos); 
        if (this.tipo_evento != null)
             cloned.setTipo_evento(new String(this.tipo_evento)); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}